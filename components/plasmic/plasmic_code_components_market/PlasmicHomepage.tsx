// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8PziLNLiwDrVWxn4w3TkNb
// Component: OmsGOMJOWuYk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import RegisterButton from "../../RegisterButton"; // plasmic-import: tdd4VyVt1w/component
import Checkbox from "../../Checkbox"; // plasmic-import: J2h6uk0-o-l/component
import Prompt from "../../Prompt"; // plasmic-import: c4S_3UOZbZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_code_components_market.module.css"; // plasmic-import: 8PziLNLiwDrVWxn4w3TkNb/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OmsGOMJOWuYk/css

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<"div">;
  copyButton?: Flex__<typeof RegisterButton>;
  antlist?: Flex__<"div">;
  checkbox3?: Flex__<typeof Checkbox>;
  checkbox4?: Flex__<typeof Checkbox>;
  unstyledList?: Flex__<"div">;
  checkbox5?: Flex__<typeof Checkbox>;
  checkbox6?: Flex__<typeof Checkbox>;
  list?: Flex__<"div">;
  checkbox?: Flex__<typeof Checkbox>;
  checkbox2?: Flex__<typeof Checkbox>;
  prompt?: Flex__<typeof Prompt>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox3.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox4.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox5.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "checkbox6.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ycyCh
              )}
            >
              {"Code Component Market for Plasmic"}
            </div>
            <RegisterButton
              data-plasmic-name={"copyButton"}
              data-plasmic-override={overrides.copyButton}
              className={classNames("__wab_instance", sty.copyButton)}
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__h3Vkr)}>
            <div className={classNames(projectcss.all, sty.freeBox___0MbDx)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dlOwx
                )}
              >
                {"Antd Components:"}
              </div>
              <div
                data-plasmic-name={"antlist"}
                data-plasmic-override={overrides.antlist}
                className={classNames(projectcss.all, sty.antlist)}
              >
                <Checkbox
                  data-plasmic-name={"checkbox3"}
                  data-plasmic-override={overrides.checkbox3}
                  className={classNames("__wab_instance", sty.checkbox3)}
                  isChecked={
                    generateStateValueProp($state, [
                      "checkbox3",
                      "isChecked"
                    ]) ?? false
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox3",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {"UnstyledTextareaAutosize"}
                </Checkbox>
                <Checkbox
                  data-plasmic-name={"checkbox4"}
                  data-plasmic-override={overrides.checkbox4}
                  className={classNames("__wab_instance", sty.checkbox4)}
                  isChecked={
                    generateStateValueProp($state, [
                      "checkbox4",
                      "isChecked"
                    ]) ?? false
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox4",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {"Typewriter"}
                </Checkbox>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__ii0Vv)}>
              <div className={classNames(projectcss.all, sty.freeBox__mpeX7)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pZx5)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wJNyr
                )}
              >
                {"Unstyled Components:"}
              </div>
              <div
                data-plasmic-name={"unstyledList"}
                data-plasmic-override={overrides.unstyledList}
                className={classNames(projectcss.all, sty.unstyledList)}
              >
                <Checkbox
                  data-plasmic-name={"checkbox5"}
                  data-plasmic-override={overrides.checkbox5}
                  className={classNames("__wab_instance", sty.checkbox5)}
                  isChecked={
                    generateStateValueProp($state, [
                      "checkbox5",
                      "isChecked"
                    ]) ?? false
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox5",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {"UnstyledTextareaAutosize"}
                </Checkbox>
                <Checkbox
                  data-plasmic-name={"checkbox6"}
                  data-plasmic-override={overrides.checkbox6}
                  className={classNames("__wab_instance", sty.checkbox6)}
                  isChecked={
                    generateStateValueProp($state, [
                      "checkbox6",
                      "isChecked"
                    ]) ?? false
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox6",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {"Typewriter"}
                </Checkbox>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__dLqd)}>
              <div className={classNames(projectcss.all, sty.freeBox__k4HZl)} />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__vbsoe)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___3RMVu
                )}
              >
                {"Other Components:"}
              </div>
              <div
                data-plasmic-name={"list"}
                data-plasmic-override={overrides.list}
                className={classNames(projectcss.all, sty.list)}
              >
                <Checkbox
                  data-plasmic-name={"checkbox"}
                  data-plasmic-override={overrides.checkbox}
                  className={classNames("__wab_instance", sty.checkbox)}
                  isChecked={
                    generateStateValueProp($state, ["checkbox", "isChecked"]) ??
                    false
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {"UnstyledTextareaAutosize"}
                </Checkbox>
                <Checkbox
                  data-plasmic-name={"checkbox2"}
                  data-plasmic-override={overrides.checkbox2}
                  className={classNames("__wab_instance", sty.checkbox2)}
                  isChecked={
                    generateStateValueProp($state, [
                      "checkbox2",
                      "isChecked"
                    ]) ?? false
                  }
                  onChange={(...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "checkbox2",
                      "isChecked"
                    ])(eventArgs[0]);
                  }}
                >
                  {"Typewriter"}
                </Checkbox>
              </div>
            </div>
          </div>
          <Prompt
            data-plasmic-name={"prompt"}
            data-plasmic-override={overrides.prompt}
            className={classNames("__wab_instance", sty.prompt)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "copyButton",
    "antlist",
    "checkbox3",
    "checkbox4",
    "unstyledList",
    "checkbox5",
    "checkbox6",
    "list",
    "checkbox",
    "checkbox2",
    "prompt"
  ],
  header: ["header", "copyButton"],
  copyButton: ["copyButton"],
  antlist: ["antlist", "checkbox3", "checkbox4"],
  checkbox3: ["checkbox3"],
  checkbox4: ["checkbox4"],
  unstyledList: ["unstyledList", "checkbox5", "checkbox6"],
  checkbox5: ["checkbox5"],
  checkbox6: ["checkbox6"],
  list: ["list", "checkbox", "checkbox2"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  prompt: ["prompt"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  copyButton: typeof RegisterButton;
  antlist: "div";
  checkbox3: typeof Checkbox;
  checkbox4: typeof Checkbox;
  unstyledList: "div";
  checkbox5: typeof Checkbox;
  checkbox6: typeof Checkbox;
  list: "div";
  checkbox: typeof Checkbox;
  checkbox2: typeof Checkbox;
  prompt: typeof Prompt;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    copyButton: makeNodeComponent("copyButton"),
    antlist: makeNodeComponent("antlist"),
    checkbox3: makeNodeComponent("checkbox3"),
    checkbox4: makeNodeComponent("checkbox4"),
    unstyledList: makeNodeComponent("unstyledList"),
    checkbox5: makeNodeComponent("checkbox5"),
    checkbox6: makeNodeComponent("checkbox6"),
    list: makeNodeComponent("list"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    prompt: makeNodeComponent("prompt"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
