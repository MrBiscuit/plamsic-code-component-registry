// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8PziLNLiwDrVWxn4w3TkNb
// Component: OmsGOMJOWuYk

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Checkbox from "../../Checkbox"; // plasmic-import: J2h6uk0-o-l/component
import RegisterButton from "../../RegisterButton"; // plasmic-import: tdd4VyVt1w/component
import Prompt from "../../Prompt"; // plasmic-import: c4S_3UOZbZ/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_plasmic_code_components_market.module.css"; // plasmic-import: 8PziLNLiwDrVWxn4w3TkNb/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: OmsGOMJOWuYk/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  freeBox?: p.Flex<"div">;
  list?: p.Flex<"div">;
  checkbox?: p.Flex<typeof Checkbox>;
  checkbox2?: p.Flex<typeof Checkbox>;
  copyButton?: p.Flex<typeof RegisterButton>;
  prompt?: p.Flex<typeof Prompt>;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkbox.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },

      {
        path: "checkbox2.isChecked",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {true ? (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
              >
                {true ? (
                  <div
                    data-plasmic-name={"list"}
                    data-plasmic-override={overrides.list}
                    className={classNames(projectcss.all, sty.list)}
                  >
                    <Checkbox
                      data-plasmic-name={"checkbox"}
                      data-plasmic-override={overrides.checkbox}
                      className={classNames("__wab_instance", sty.checkbox)}
                      isChecked={
                        p.generateStateValueProp($state, [
                          "checkbox",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "checkbox",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {"UnstyledTextareaAutosize"}
                    </Checkbox>
                    <Checkbox
                      data-plasmic-name={"checkbox2"}
                      data-plasmic-override={overrides.checkbox2}
                      className={classNames("__wab_instance", sty.checkbox2)}
                      isChecked={
                        p.generateStateValueProp($state, [
                          "checkbox2",
                          "isChecked"
                        ]) ?? false
                      }
                      onChange={(...eventArgs) => {
                        p.generateStateOnChangeProp($state, [
                          "checkbox2",
                          "isChecked"
                        ])(eventArgs[0]);
                      }}
                    >
                      {"Typewriter"}
                    </Checkbox>
                  </div>
                ) : null}
                <RegisterButton
                  data-plasmic-name={"copyButton"}
                  data-plasmic-override={overrides.copyButton}
                  className={classNames("__wab_instance", sty.copyButton)}
                />
              </div>
            ) : null}
            <Prompt
              data-plasmic-name={"prompt"}
              data-plasmic-override={overrides.prompt}
              className={classNames("__wab_instance", sty.prompt)}
            />
          </section>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "freeBox",
    "list",
    "checkbox",
    "checkbox2",
    "copyButton",
    "prompt"
  ],
  section: [
    "section",
    "freeBox",
    "list",
    "checkbox",
    "checkbox2",
    "copyButton",
    "prompt"
  ],
  freeBox: ["freeBox", "list", "checkbox", "checkbox2", "copyButton"],
  list: ["list", "checkbox", "checkbox2"],
  checkbox: ["checkbox"],
  checkbox2: ["checkbox2"],
  copyButton: ["copyButton"],
  prompt: ["prompt"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  freeBox: "div";
  list: "div";
  checkbox: typeof Checkbox;
  checkbox2: typeof Checkbox;
  copyButton: typeof RegisterButton;
  prompt: typeof Prompt;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    freeBox: makeNodeComponent("freeBox"),
    list: makeNodeComponent("list"),
    checkbox: makeNodeComponent("checkbox"),
    checkbox2: makeNodeComponent("checkbox2"),
    copyButton: makeNodeComponent("copyButton"),
    prompt: makeNodeComponent("prompt"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
